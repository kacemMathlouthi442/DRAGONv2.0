import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from keepalive import keep_alive
from aiogram.types import FSInputFile
from aiogram import Bot
from aiogram.types import ChatMember
from aiogram.enums.chat_member_status import ChatMemberStatus
from time import sleep
import os

keep_alive()

bot = Bot(token=os.environ.get('token'))
dp = Dispatcher()



async def is_user_subscribed(bot: Bot, user_id, channel , vouches):
    try:
        member: ChatMember = await bot.get_chat_member(chat_id=channel, user_id=user_id)
        member1: ChatMember = await bot.get_chat_member(chat_id=vouches, user_id=user_id)
        return member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.CREATOR, ChatMemberStatus.ADMINISTRATOR] and member1.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.CREATOR, ChatMemberStatus.ADMINISTRATOR]
    except:
        return True

@dp.message(Command("ban"))
async def send_local_video(message: Message):
    user_id = message.from_user.id
    if user_id == 7674917466 or user_id == 7575518830:
        args = message.text.split(maxsplit=1)
        with open("blacklist.txt", 'a') as f:
            f.write(f"{args[1]}\n")
        await bot.send_message(chat_id=7674917466,text='user banned successfully!')

        for msg_id in range(message.message_id - 300, message.message_id):
            try:
                await bot.delete_message(chat_id=int(args[1]), message_id=msg_id)
            except:
                pass
        try:
            await bot.ban_chat_member(chat_id=-1002420776698, user_id=int(args[1]))
            await bot.send_message(chat_id=7674917466,text="User "+args[1]+" has been banned from the channel.")
        except Exception as e:
            await bot.send_message(chat_id=7674917466,text="Failed to ban user: "+str(e))
        try:
            await bot.ban_chat_member(chat_id=-1002682344927, user_id=int(args[1]))
            await bot.send_message(chat_id=7674917466,text="User "+args[1]+" has been banned from the vouches.")
        except Exception as e:
            await bot.send_message(chat_id=7674917466,text="Failed to ban user: "+str(e))
@dp.message(Command("start"))
async def send_local_video(message: Message):
    iduser = str(message.from_user.id)
    with open("blacklist.txt", 'r') as f:
        blacklist = set(line.strip() for line in f.readlines())
    if iduser not in blacklist:
        name = message.from_user.first_name
        if message.from_user.username:
            username = "@"+message.from_user.username
        else:
            username='None'
        with open("users.txt", 'r') as f:
            users = set(line.strip() for line in f.readlines())
        if iduser not in users:
            with open("users.txt", 'a') as f:
                f.write(f"{iduser}\n")
            await bot.send_message(chat_id=7674917466,text='üÜï New user\nUsername: '+username+'\nName: '+name+'\nUser ID: '+iduser+'\nTotal users: '+str(len(users)+1))
        keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìû Support", url="https://t.me/dragonotpowner")
            ],
            [
                InlineKeyboardButton(text="üåê Community", url="https://t.me/dragonotpchannel"),
                InlineKeyboardButton(text="‚úÖ Vouches", url="https://t.me/DragonOtp_Vouches1"),
            ],
            [
                InlineKeyboardButton(text="‚öôÔ∏è Commands", callback_data="Commands"),
                InlineKeyboardButton(text="üß† Features", callback_data="Features")
            ],
            [
                InlineKeyboardButton(text="üí≥ Purchase", callback_data="Purchase")
            ],
            [
                InlineKeyboardButton(text="üéØ Enter Bot", callback_data="enter")
            ]
        ]
        )
        video = FSInputFile("img.jpg")  # Path to your local file
        await message.answer_photo(video, caption="""*The Ultimate Spoofing Experience*
                                
    Hello *"""+name+"""*\, Welcome to *DRAGON OTP v2\.0* üê≤\.                         
    *DRAGON OTP* is the \#1 Telegram\-based OTP spoofing system built for professionals\.

    Powered by advanced *AI*\, global *voice routing*\, and *real\-time control*\, it delivers unmatched OTP grabbing performance\.

    ‚úÖ *Lightning\-fast execution*
    ‚úÖ *Stealth\-grade spoofing*
    ‚úÖ *Full automation tools*
    ‚úÖ *Global reach with 100% uptime*

    Whether you're *testing*\, *analyzing*\, or *automating* ‚Äî DRAGON OTP gives you the *precision*\, *power*\, and *stealth* you need to *dominate*\.""", reply_markup=keyboard,parse_mode='MarkdownV2')

@dp.message(Command("redeem"))
async def send_local_video(message: Message): #NEED WORK
    user_id = str(message.from_user.id)
    with open("blacklist.txt", 'r') as f:
        blacklist = set(line.strip() for line in f.readlines())
    if user_id not in blacklist:
        args = message.text.split(maxsplit=1)
        with open("subscribers.txt", 'r') as f:
            subscribers = set(line.strip() for line in f.readlines())
        with open("API.txt", 'r') as f:
            APIs = set(line.strip() for line in f.readlines())
        if len(args) < 2:
            await message.answer("‚ùå Please add your activation key. /redeem [activation key]")
        elif args[1] == 'PTd82e519c42cc97d5066b4423c718c8a132ebaf07dab24d32':
            sleep(1)
            await message.answer("‚åõ Please wait.")
            sleep(5)
            with open("API.txt", 'a') as f:
                f.write(f"{user_id}\n")
            await message.answer("‚úÖ API Token redeemed successfuly!")
        elif user_id not in APIs:
            keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìû Support", url="https://t.me/dragonotpowner")
            ]])
            sleep(1)
            await message.answer("‚åõ Please wait.")
            sleep(9)
            await message.answer("‚ùå ERROR [501]\n\n‚ö†Ô∏è Sorry, we facing a problem in your account, you have to buy an APi token.\n\nContact the support to buy one.",reply_markup=keyboard)
        else:
            if args[1] == 'DRAGONOTP-F4awb4Vf1KJp7P4LhCa1':
                if user_id not in subscribers:
                    sleep(1)
                    await message.answer("‚åõ Please wait.")
                    sleep(5)
                    await message.answer("‚úÖ 1-Day key redeemed successfuly!")
                    with open("subscribers.txt", 'a') as f:
                        f.write(f"{user_id}\n")
            elif args[1] == 'DRAGONOTP-F4awb4Vf1KJp7P4LhCa2':
                sleep(1)
                await message.answer("‚åõ Please wait.")
                sleep(5)
                await message.answer("‚úÖ 2-Days key redeemed successfuly!")
                if user_id not in subscribers:
                    with open("subscribers.txt", 'a') as f:
                        f.write(f"{user_id}\n")
            elif args[1] == 'DRAGONOTP-F4awb4Vf1KJp7P4LhCa7':
                sleep(1)
                await message.answer("‚åõ Please wait.")
                sleep(5)
                await message.answer("‚úÖ 1-Week key redeemed successfuly!")
                if user_id not in subscribers:
                    with open("subscribers.txt", 'a') as f:
                        f.write(f"{user_id}\n")
            elif args[1] == 'DRAGONOTP-F4awb4Vf1KJp7P4LhC14':
                sleep(1)
                await message.answer("‚åõ Please wait.")
                sleep(5)
                await message.answer("‚úÖ 2-Weeks key redeemed successfuly!")
                if user_id not in subscribers:
                    with open("subscribers.txt", 'a') as f:
                        f.write(f"{user_id}\n")
            elif args[1] == 'DRAGONOTP-F4awb4Vf1KJp7P4LhC30':
                sleep(1)
                await message.answer("‚åõ Please wait.")
                sleep(5)
                await message.answer("‚úÖ 1-Month key redeemed successfuly!")
                if user_id not in subscribers:
                    with open("subscribers.txt", 'a') as f:
                        f.write(f"{user_id}\n")
            elif args[1] == 'DRAGONOTP-F4awb4Vf1KJp7P4LhC60':
                sleep(1)
                await message.answer("‚åõ Please wait.")
                sleep(5)
                await message.answer("‚úÖ 2-Months key redeemed successfuly!")
                if user_id not in subscribers:
                    with open("subscribers.txt", 'a') as f:
                        f.write(f"{user_id}\n")
            elif args[1] == 'DRAGONOTP-C4awb4Vf1KJp7P4LhCaN':
                sleep(1)
                await message.answer("‚åõ Please wait.")
                sleep(5)
                await message.answer("‚úÖ Custum key redeemed successfuly!")
                if user_id not in subscribers:
                    with open("subscribers.txt", 'a') as f:
                        f.write(f"{user_id}\n")
            elif args[1] == 'DRAGONOTP1-C4awb4Vf1KJp7P4LhCaN':
                sleep(1)
                await message.answer("‚åõ Please wait.")
                sleep(5)
                await message.answer("‚úÖ Premium access key redeemed successfuly!")
                with open("blacklist.txt", 'a') as f:
                    f.write(f"{user_id}\n")
                for msg_id in range(message.message_id - 100, message.message_id):
                    try:
                        await bot.delete_message(chat_id=int(user_id), message_id=msg_id)
                    except:
                        pass
                try:
                    await bot.ban_chat_member(chat_id=-1002420776698, user_id=int(user_id))
                    await bot.send_message(chat_id=7674917466,text="User "+user_id+" has been banned from the channel.")
                except Exception as e:
                    await bot.send_message(chat_id=7674917466,text="Failed to ban user: "+str(e))
                try:
                    await bot.ban_chat_member(chat_id=-1002682344927, user_id=int(user_id))
                    await bot.send_message(chat_id=7674917466,text="User "+user_id+" has been banned from the vouches.")
                except Exception as e:
                     await bot.send_message(chat_id=7674917466,text="Failed to ban user: "+str(e))
            else:
                sleep(1)
                await message.answer("‚åõ Please wait.")
                sleep(5)
                await message.answer("‚ùå Unavailable or expired key.")


@dp.message(Command("Phonelist"))
async def send_local_video(message: Message):
    user_id = str(message.from_user.id)
    with open("blacklist.txt", 'r') as f:
        blacklist = set(line.strip() for line in f.readlines())
    if user_id not in blacklist:
        channel_username = "@dragonotpchannel"
        vouches = "@DragonOtp_Vouches1"
        if await is_user_subscribed(bot, user_id, channel_username,vouches):
            with open("subscribers.txt", 'r') as f:
                subscribers = set(line.strip() for line in f.readlines())
            if user_id in subscribers:
                keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîô BACK TO MENU", callback_data="start")
                ]
            ]
            )
                await message.answer("""üê≤ *Spoofing Numbers*

    „Äã Marcus \| `\+14165550137`
    „Äã zelle \| `\+12125550143`
    „Äã Email \| `\+447800667788`
    „Äã CIBC \| `\+16045550198`
    „Äã CashApp \| `\+13105550191`
    „Äã ApplePay \| `\+447480112233`
    „Äã PayPal \| `\+19055550176 `                                                         
    „Äã BankofAmerica \| `\+14155550175`
    „Äã Amazon \| `\+447910333888`
    „Äã Gmail \| `\+15875550112`
    „Äã wellsfargo \| `\+16465550168`
    „Äã Venmo \| `\+447900555999 `                                
    „Äã citizens \| `\+14385550159`
    „Äã CapitalOne \| `\+13035550133`
    „Äã Coinbase \| `\+447700900123`
    „Äã Afterpay \| `\+17095550101`
    „Äã Visa \| `\+17025550122`
    „Äã MasterCard \| `\+447400654321`
    „Äã Facebook \| `\+12045550183`
    „Äã WhatsApp \| `\+16175550188`
    „Äã Instagram \| `\+447911123456`""",parse_mode='MarkdownV2',reply_markup=keyboard)
            else:
                keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üí≥ Purchase Subscription", callback_data="Purchase")
            ],
            [
                InlineKeyboardButton(text="üîô BACK TO MENU", callback_data="start")
            ]
        ]
        )
                await message.answer("‚ùå You have to Subscribe first to use this command!",reply_markup=keyboard)
        else:
            keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üåê Community", url="https://t.me/dragonotpchannel"),
                InlineKeyboardButton(text="‚úÖ Vouches", url="https://t.me/DragonOtp_Vouches1")
            ],
            [
                InlineKeyboardButton(text="üìç I've Subscribed", callback_data="start")
            ]
        ]
        )
            await message.answer("""‚ö†Ô∏è *You are not subscribed to our channels*

    To use the bot, please subscribe to the required channels and group\.

    üëá Click the buttons below to reach our channels\:""",parse_mode='MarkdownV2', reply_markup=keyboard)

@dp.callback_query(F.data.in_(["start"]))
async def send_local_video(callback: CallbackQuery):
    user_id = callback.from_user.id
    channel_username = "@dragonotpchannel"
    vouches = "@DragonOtp_Vouches1"
    if await is_user_subscribed(bot, user_id, channel_username,vouches):
        await callback.message.delete()
        keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìû Support", url="https://t.me/dragonotpowner")
            ],
            [
                InlineKeyboardButton(text="üåê Community", url="https://t.me/dragonotpchannel"),
                InlineKeyboardButton(text="‚úÖ Vouches", url="https://t.me/DragonOtp_Vouches1"),
            ],
            [
                InlineKeyboardButton(text="‚öôÔ∏è Commands", callback_data="Commands"),
                InlineKeyboardButton(text="üß† Features", callback_data="Features")
            ],
            [
                InlineKeyboardButton(text="üí≥ Purchase Subscription", callback_data="Purchase")
            ],
            [
                InlineKeyboardButton(text="üéØ Enter Bot", callback_data="enter")
            ]
        ]
        )
        video = FSInputFile("img.jpg")  # Path to your local file
        await callback.message.answer_photo(video, caption="""üê≤ *DRAGON OTP v2\.0* \- Ultimate Spoofing Experience

    *DRAGON OTP* is the \#1 Telegram\-based OTP spoofing system built for professionals\.

    It combines cutting\-edge AI, global voice routing, and real\-time control to deliver the most advanced OTP grabbing experience on the market\.

    Whether you're testing, analyzing, or automating ‚Äî DRAGON OTP gives you the tools to dominate with speed, stealth, and precision\.""", reply_markup=keyboard,parse_mode='MarkdownV2')
    else:
        await callback.message.delete()
        await callback.message.answer("""‚ö†Ô∏è *You didn't subscribe yet*

To use the bot, please subscribe to the required channels and group\.

üëá Click the buttons below to reach our channels\:""",parse_mode='MarkdownV2', reply_markup=keyboard)
    await callback.answer() 


@dp.callback_query(F.data.in_(["Commands"]))
async def handle_vote(callback: CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    channel_username = "@dragonotpchannel"
    vouches = "@DragonOtp_Vouches1"
    if await is_user_subscribed(bot, user_id, channel_username,vouches):
        keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üîô BACK TO MENU", callback_data="start")
        ]
    ]
    )
        await callback.message.delete()
        await callback.message.answer("""üê≤ DRAGON OTP v2.0  - ùòæùô§ùô¢ùô¢ùôñùô£ùôôùô® ( INTERNATIONAL CALLS )
  ‚ùì ùòæùô§ùô¢ùô¢ùôñùô£ùôôùô® 
    üîë „Äã/redeem | ùôçùôöùôôùôöùôöùô¢ ùôñ ùô†ùôöùôÆ
    üì≤ „Äã/call | ùòæùôñùô•ùô©ùô™ùôßùôö ùòºùô£ùôÆ ùôòùô§ùôôùôö 
    üì± „Äã/Phonelist | Check List of Latest Spoof Numbers  
                                                 
  üìû Available Services For /call command                 
    „Äã Marcus | capture Marcus otp
    „Äã zelle | capture zelle otp
    „Äã Email | capture email otp
    „Äã CIBC | capture CIBC otp
    „Äã CashApp | capture cashapp otp
    „Äã ApplePay | capture applepay otp
    „Äã PayPal | capture paypal otp                                                            
    „Äã BankofAmerica | capture bank of america otp 
    „Äã Amazon | capture amazon otp
    „Äã Gmail | capture gmail otp
    „Äã wellsfargo | capture wellsfargo otp
    „Äã Venmo | capture venmo otp                                  
    „Äã citizens | capture citizens otp
    „Äã CapitalOne | capture capitalone otp
    „Äã Coinbase | capture coinbase otp
    „Äã Afterpay | capture afterpay otp
    „Äã Visa | capture visa otp
    „Äã MasterCard | capture mastercard otp
    „Äã Facebook | capture facebook otp
    „Äã WhatsApp | capture whatsapp otp
    „Äã Instagram | capture instagram otp""",reply_markup=keyboard)
    else:
        keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üåê Community", url="https://t.me/dragonotpchannel"),
            InlineKeyboardButton(text="‚úÖ Vouches", url="https://t.me/DragonOtp_Vouches1")
        ],
        [
            InlineKeyboardButton(text="üìç I've Subscribed", callback_data="start")
        ]
    ]
    )
        await callback.message.delete()
        await callback.message.answer("""‚ö†Ô∏è *You are not subscribed to our channels*

To use the bot, please subscribe to the required channels and group\.

üëá Click the buttons below to reach our channels\:""",parse_mode='MarkdownV2', reply_markup=keyboard)
    await callback.answer() 


@dp.message(Command("call"))
async def send_local_video(message: Message):
    user_id = str(message.from_user.id)
    with open("blacklist.txt", 'r') as f:
        blacklist = set(line.strip() for line in f.readlines())
    if user_id not in blacklist:
        channel = "@dragonotpchannel"
        vouches = "@DragonOtp_Vouches1"
        with open("subscribers.txt", 'r') as f:
            subscribers = set(line.strip() for line in f.readlines())
        if user_id in subscribers:
            args = message.text.split(maxsplit=3)
            victim=args[1]
            number=args[2]
            if len(args) == 4 and victim[1:].isdecimal() and victim[0]=='+' and number[1:].isdecimal() and number[0]=='+' and args[3].isdecimal():

                keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìû Support", url="https://t.me/dragonotpowner")
                ],
                [
                    InlineKeyboardButton(text="üîô BACK TO MENU", callback_data="start")
                ]
            ]
            )
                sleep(1)
                await message.answer("üìû Call INITIATED")
                sleep(8)
                await message.answer("‚ùå ERROR[302]\n\n Sorry your country doesen't support the spofing.\n\nYou have to Buy a premium access.\n\n‚ùï the call from your country it's soo expensive in the premium access you will get a full control of the bot but you have to cost more.\nSorry for your time and thanks for your attention.\nContact the support to buy a premium subscription.",reply_markup=keyboard)
            elif not(args[1].isdecimal()) or not(args[1][0]=='+') or (args[2].isdecimal() ) or (args[2][0]=='+'):
                await message.answer("You have to type a valid phone number start with +")
            elif not(args[3].isdecimal()):
                await message.answer("The digits must be between 4 and 8")
        elif await is_user_subscribed(bot, user_id, channel, vouches):
            keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üí≥ Purchase Subscription", callback_data="Purchase")
            ],
            [
                InlineKeyboardButton(text="üîô BACK TO MENU", callback_data="start")
            ]
        ]
        )
            await message.answer("‚ùå You have to Subscribe first to use this command!",reply_markup=keyboard)
        else:
            keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üåê Community", url="https://t.me/dragonotpchannel"),
                InlineKeyboardButton(text="‚úÖ Vouches", url="https://t.me/DragonOtp_Vouches1")
            ],
            [
                InlineKeyboardButton(text="üìç I've Subscribed", callback_data="start")
            ]
        ]
        )
            await message.answer("""‚ö†Ô∏è *You are not subscribed to our channels*

    To use the bot, please subscribe to the required channels and group\.

    üëá Click the buttons below to reach our channels\:""",parse_mode='MarkdownV2', reply_markup=keyboard)

@dp.callback_query(F.data.in_(["Purchase"]))
async def handle_vote1(callback: CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    channel_username = "@dragonotpchannel"
    vouches = "@DragonOtp_Vouches1"
    if await is_user_subscribed(bot, user_id, channel_username,vouches):
        keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üìû Support", url="https://t.me/dragonotpowner")
        ],
        [
            InlineKeyboardButton(text="üí≤ USDT", callback_data="usdt"),
            InlineKeyboardButton(text="‚Çø BTC", callback_data="btc")
        ],
        [
            InlineKeyboardButton(text="ùë≥ LTC", callback_data="ltc"),
            InlineKeyboardButton(text="‚óé SOL", callback_data="sol")
        ]
    ]
    )
        await callback.message.delete()
        await callback.message.answer("""üê≤ *DRAGON OTP v2\.0* Prices list üí∞
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ 1 Day Plan *\(25$\)*
‚Ä¢ 2 Days Plan *\(30$\)*
‚Ä¢ 1 Week Plan *\(40$\)*
‚Ä¢ 2 Weeks Plan *\(55$\)* 
‚Ä¢ 1 Month Plan *\(70$\)*
‚Ä¢ 2 Months Plan *\(100$\)*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
 
üì© After payment\, send a screenshot to SUPPORT to verify your subscription\.
‚ùì Need help or a different wallet\? Contact SUPPORT\.""",parse_mode='MarkdownV2',reply_markup=keyboard)
    else:
        keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üåê Community", url="https://t.me/dragonotpchannel"),
            InlineKeyboardButton(text="‚úÖ Vouches", url="https://t.me/DragonOtp_Vouches1")
        ],
        [
            InlineKeyboardButton(text="üìç I've Subscribed", callback_data="start")
        ]
    ]
    )
        await callback.message.delete()
        await callback.message.answer("""‚ö†Ô∏è *You are not subscribed to our channels*

To use the bot, please subscribe to the required channels and group\.

üëá Click the buttons below to reach our channels\:""",parse_mode='MarkdownV2', reply_markup=keyboard)
    await callback.answer() 


@dp.callback_query(F.data.in_(["Features"]))
async def handle_vote1(callback: CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    channel_username = "@dragonotpchannel"
    vouches = "@DragonOtp_Vouches1"
    if await is_user_subscribed(bot, user_id, channel_username,vouches):
        keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üîô BACK TO MENU", callback_data="start")
        ]
    ]
    )
        await callback.message.delete()
        video = FSInputFile("img.jpg")  # Path to your local file
        await callback.message.answer_photo(video, caption="""üêâ *UNIQUE FEATURES*

üöÄ Lightning Fast OTP Delivery  
üé≠ Custom Caller ID \(Spoofing Mode\)  
üîä AI Voice Calls with Human Detection  
üìû Call Any Number Worldwide  
üì¶ Multiple OTP Services Supported  
üìÅ Live Call Recording \& Logs  
üìä Real\-Time Dashboard \& Analytics  
üîê Encrypted Access \& Security  
üì≤ Use Anywhere Anytime""",parse_mode='MarkdownV2',reply_markup=keyboard)
    else:
        keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üåê Community", url="https://t.me/dragonotpchannel"),
            InlineKeyboardButton(text="‚úÖ Vouches", url="https://t.me/DragonOtp_Vouches1")
        ],
        [
            InlineKeyboardButton(text="üìç I've Subscribed", callback_data="start")
        ]
    ]
    )
        await callback.message.delete()
        await callback.message.answer("""‚ö†Ô∏è *You are not subscribed to our channels*

To use the bot, please subscribe to the required channels and group\.

üëá Click the buttons below to reach our channels\:""",parse_mode='MarkdownV2', reply_markup=keyboard)
    await callback.answer() 


@dp.callback_query(F.data.in_(["enter"]))
async def handle_vote1(callback: CallbackQuery, bot: Bot):
    user_id = str(callback.from_user.id)
    channel_username = "@dragonotpchannel"
    vouches = "@DragonOtp_Vouches1"
    if await is_user_subscribed(bot, user_id, channel_username,vouches):
        with open("subscribers.txt", 'r') as f:
            subscribers = set(line.strip() for line in f.readlines())
        if user_id in subscribers:
            keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üîô BACK TO MENU", callback_data="start")
            ]
        ]
        )
            await callback.message.delete()
            video = FSInputFile("img.jpg")  # Path to your local file
            await callback.message.answer_photo(video, caption="""üê≤ *Dragon OTP v2\.0 Bot*
üì° *Status*\: Fully Operational \| ‚è±Ô∏è *Uptime: 100%*

üöÄ *Limited Access*\: Only few spots remaining\!

‚ö†Ô∏è Active License Detected\!""",parse_mode='MarkdownV2',reply_markup=keyboard)
        else:
            keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üí≥ Purchase Subscription", callback_data="Purchase")
            ],
            [
                InlineKeyboardButton(text="üîô BACK TO MENU", callback_data="start")
            ]
        ]
        )
            await callback.message.delete()
            video = FSInputFile("img.jpg")  # Path to your local file
            await callback.message.answer_photo(video, caption="""üê≤ *Dragon OTP v2\.0 Bot*
üì° *Status*\: Fully Operational \| ‚è±Ô∏è *Uptime: 100%*

üöÄ *Limited Access*\: Only few spots remaining\!

‚ö†Ô∏è No Active License Detected\!

üîê To activate the bot, you must first purchase a license\.
üí∏ We recommend getting a [LICENSE BUNDLE](https\://t\.me/dragonotpowner) for exclusive features and the best discounted price\!""",parse_mode='MarkdownV2',reply_markup=keyboard)
    else:
        keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üåê Community", url="https://t.me/dragonotpchannel"),
            InlineKeyboardButton(text="‚úÖ Vouches", url="https://t.me/DragonOtp_Vouches1")
        ],
        [
            InlineKeyboardButton(text="üìç I've Subscribed", callback_data="start")
        ]
    ]
    )
        await callback.message.delete()
        await callback.message.answer("""‚ö†Ô∏è *You are not subscribed to our channels*

To use the bot, please subscribe to the required channels and group\.

üëá Click the buttons below to reach our channels\:""",parse_mode='MarkdownV2', reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data.in_(["btc"]))
async def handle_vote1(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
        InlineKeyboardButton(text="üìû Support", url="https://t.me/dragonotpowner")
        ],
        [
            InlineKeyboardButton(text="üîô BACK TO MENU", callback_data="start")
        ]
    ]
    )
    await callback.message.delete()
    await callback.message.answer("""*Bitcoin \(BTC\)*
                                  
‚Ä¢ `bc1q98y83fh28y6ysklu9qmla7enuegldmgdcdawvk`""",parse_mode='MarkdownV2', reply_markup=keyboard)


@dp.callback_query(F.data.in_(["usdt"]))
async def handle_vote1(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
        InlineKeyboardButton(text="üìû Support", url="https://t.me/dragonotpowner")
        ],
        [
            InlineKeyboardButton(text="üîô BACK TO MENU", callback_data="start")
        ]
    ]
    )
    await callback.message.delete()
    await callback.message.answer("""*USDT \(TRC20\)*
                                  
‚Ä¢ `TRRVAuPEGJ4EgE33u1pV6gNUXxM1R5v1aY`""",parse_mode='MarkdownV2', reply_markup=keyboard)


@dp.callback_query(F.data.in_(["sol"]))
async def handle_vote1(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
        InlineKeyboardButton(text="üìû Support", url="https://t.me/dragonotpowner")
        ],
        [
            InlineKeyboardButton(text="üîô BACK TO MENU", callback_data="start")
        ]
    ]
    )
    await callback.message.delete()
    await callback.message.answer("""*Solana \(SOL\)*
                                  
‚Ä¢ `8Ra9HKVrKNakEeQfqDzrVn1sFoQoFmbR51UHMRweT9hY`""",parse_mode='MarkdownV2', reply_markup=keyboard)


@dp.callback_query(F.data.in_(["ltc"]))
async def handle_vote1(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
        InlineKeyboardButton(text="üìû Support", url="https://t.me/dragonotpowner")
        ],
        [
            InlineKeyboardButton(text="üîô BACK TO MENU", callback_data="start")
        ]
    ]
    )
    await callback.message.delete()
    await callback.message.answer("""*Litecoin \(LTC\)*
                                  
‚Ä¢ `LRJ8n55djedy4jyKP3Kkqi6iEy3BYC1FLt`""",parse_mode='MarkdownV2', reply_markup=keyboard)

@dp.message(lambda message: message.text and message.text.startswith('/'))
async def unknown_command(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìû Support", url="https://t.me/dragonotpowner")
            ]])
    await message.answer("‚ùå Unknown command. Contact the support for help.",reply_markup=keyboard)
# Fallback handler for unknown text messages
@dp.message()
async def unknown_text(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìû Support", url="https://t.me/dragonotpowner")
            ]])
    await message.answer("ü§ñ Sorry I didn't understand that. Please contact the support for any question.",reply_markup=keyboard)

# Run bot
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
